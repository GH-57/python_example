############################

create new repository > new repository

############################
repository name: pr-test

# 생성할 때 create a README file 체크

#############################

# git clone 해서 로컬에 저장소를 가져옵니다.
# 최상위 폴더는 project입니다.
# Code > HTTPS 클릭 > URL 복사
# VSCode에서 터미널 열고 아래 명령어 입력

git clone https://github.com/GH-57/pr-test.git .

#############################

GitHub Wiki > create the first page 클릭

# 프롬프트
'''
GitHub Wiki에 Django mini 프로젝트 컨벤션 가이드를 줄려고 해. 아래와 같이 간단하게 작성해줘.

1. VSC 익스텐션 가이드
2. Python 코딩 스타일 가이드
3. 깃 관리, 깃모지 및 커밋 가이드
'''

# 답변
'''
# Django Mini Project Convention Guide

이 가이드는 Django mini 프로젝트를 진행할 때 팀원들이 지켜야 할 컨벤션에 대해 설명합니다.

## 1. VSC 익스텐션 가이드

프로젝트를 진행할 때 다음과 같은 VSC 익스텐션을 사용하는 것을 권장합니다.

- Python
- Django
- SQLite
- Git History
- GitLens
- Prettier
- Auto Rename Tag
- Live Server

## 2. Python 코딩 스타일 가이드

Python 코드를 작성할 때는 PEP 8 스타일 가이드를 따릅니다.

- 들여쓰기는 스페이스 4칸을 사용합니다.
- 최대 줄 길이는 79자입니다.
- 함수와 클래스 사이에는 빈 줄을 두 줄 추가합니다.
- 모듈 임포트는 알파벳 순서로 정렬합니다.
- 변수와 함수 이름은 snake_case를 사용합니다.
- 클래스 이름은 PascalCase를 사용합니다.

## 3. 깃 관리, 깃모지 및 커밋 가이드

깃 관리 시 다음 규칙을 따릅니다.

- 브랜치 이름은 `feature/기능명` 형식을 사용합니다.
- 커밋 메시지는 영어로 작성하며, 제목은 50자 이내로 제한합니다.
- 커밋 메시지 제목 끝에 마침표를 사용하지 않습니다.
- 커밋 메시지 본문은 한 줄당 72자 이내로 제한합니다.

깃모지는 다음과 같이 사용합니다.

- ✨ (sparkles): 새로운 기능 추가
- 🐛 (bug): 버그 수정
- 📝 (memo): 문서 수정
- 🎨 (art): 코드 스타일 개선
- ⚡️ (zap): 성능 개선
- 🔧 (wrench): 설정 파일 수정
- 🚚 (truck): 파일 혹은 경로 이동/이름 변경
- 🔥 (fire): 코드 혹은 파일 제거
- ✅ (white_check_mark): 테스트 추가/수정
'''

#############################

GitHub repo에서 Project 클릭 > New Project > ProjectName > Project 생성
Project settings(오른쪽 상단 ...)에서 Manage access 클릭 > private 변경 > Public으로 변경

#############################

# 1cicle 시작(다만 dev 브랜치는 단 1번만 만들면 됩니다.)

#############################


GitHub repo에서 Issues 클릭 > New Issue > IssueName Issue 생성
* Add a title: 기능 이름 생성
* Add a description: 기능 내용 생성
* Assignees: 팀원 선택 (여기서는 나 선택)
* Labels: bug, duplicate, enhancement, good first issue, help wanted, invalid, question, wontfix
* Projects: Project 선택

submit new issue 클릭

Project에서 Todo, In Progress, Done 생성
Development에서 Create a branch 클릭 > BranchName 생성 > Create branch 클릭

#############################

복사하라고 뜹니다. 복사해주세요. 아직 커멘드 라인에 붙여넣진 않겠습니다.
git fetch origin
git checkout 1-one

#############################

전략은 GitHub Flow + develop branch 전략을 사용합니다.
전략상 필요한 dev branch를 만들어줍니다.

git branch
git branch dev
git push --set-upstream origin dev

settings > General > Default branch > dev 선택
// 이제부터 merge는 develop branch로 합니다.

#############################

git branch # 현재 브랜치 확인
git fetch origin # 원격 저장소의 브랜치 정보를 가져옴
git checkout 1-one # 브랜치 생성 및 이동
# 작업 진행
git add . # 변경사항을 스테이징
git commit -m "feat: test one" # 커밋
git push # 원격 저장소에 푸시


#############################

GitHub repo에서 Compare&Pull requests 클릭 또는 Pull requests 클릭 > New pull request 클릭

add a title: feat: test one
add a description: feat: test one(내용은 좀 더 상세하게 작성해주세요. table과 같은 것을 넣어주셔도 좋습니다.)

Create pull request 클릭


#############################

Merge pull request 클릭
Confirm merge 클릭
Delete branch 클릭

#############################

// local에서 해야 하는 것
git checkout dev
git pull
git branch -d 1-one

# VSC에 Source control에 가서 view git graph(git log)를 클릭
# 원하는 브랜치에 네모 박스에서 마우스 오른쪽 클릭하고 delete branch 클릭해서
# GUI로도 브랜치 삭제가 가능합니다.

#############################

# 1cicle 끝, 이렇게 5번 반복합니다!!!!!!!!!!!!!!!!!!!!!!!
아래 텍스트로 넘어가지 말고 위로 다시 올라가서 5번 반복하세요!!

#############################
